// Code generated by gensubstate at testdata/simple.go; DO NOT EDIT.

package testdata

import (
	"database/sql"
	"testing"
)

// NewSubstateForTesting returns an implementation of Substate which can be used
// for testing.
func NewSubstateForTesting(_ *testing.TB, injectors ...Injector) *substate {
	var s substate

	for _, injector := range injectors {
		injector.Inject(&s)
	}

	return &s
}

type Injector interface {
	Inject(*substate)
}

// InjectorFunc defines a convenience type making it easy to implement
// Injectors.
type InjectorFunc func(*substate)

// Inject implements the Injector interface.
func (fn InjectorFunc) Inject(s *substate) {
	fn(s)
}

// WithDatabase returns an Injector which sets the database on substate.
func WithDatabase(database *sql.DB) InjectorFunc {
	return func(s *substate) {
		s.database = database
	}
}

// WithFooClient returns an Injector which sets the fooclient on substate.
func WithFooClient(fooclient FooClient) InjectorFunc {
	return func(s *substate) {
		s.fooclient = fooclient
	}
}

type substate struct {
	database  *sql.DB
	fooclient FooClient
}

// Database implements the Substate interface.
func (s *substate) Database() *sql.DB {
	return s.database
}

// FooClient implements the Substate interface.
func (s *substate) FooClient() FooClient {
	return s.fooclient
}
