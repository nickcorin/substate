// Code generated by gensubstate at testdata/custom_type.go; DO NOT EDIT.

package testdata

import (
	"testing"
)

// NewServiceLocator returns a concrete implementation of ServiceLocator.
func NewServiceLocator(
	fooClient FooClient,
	barClient BarClient,
) *serviceLocator {
	return &serviceLocator{
		fooClient: fooClient,
		barClient: barClient,
	}
}

// NewServiceLocatorForTesting returns an implementation of ServiceLocator which can be used for testing.
func NewServiceLocatorForTesting(_ testing.TB, injectors ...Injector) *serviceLocator {
	var s serviceLocator

	for _, injector := range injectors {
		injector.Inject(&s)
	}

	return &s
}

type Injector interface {
	Inject(*serviceLocator)
}

// InjectorFunc defines a convenience type making it easy to implement Injectors.
type InjectorFunc func(*serviceLocator)

// Inject implements the Injector interface.
func (fn InjectorFunc) Inject(s *serviceLocator) {
	fn(s)
}

// WithFooClient returns an Injector which sets the fooClient on serviceLocator.
func WithFooClient(fooClient FooClient) InjectorFunc {
	return func(s *serviceLocator) {
		s.fooClient = fooClient
	}
}

// WithBarClient returns an Injector which sets the barClient on serviceLocator.
func WithBarClient(barClient BarClient) InjectorFunc {
	return func(s *serviceLocator) {
		s.barClient = barClient
	}
}

type serviceLocator struct {
	fooClient FooClient
	barClient BarClient
}

// FooClient implements the ServiceLocator interface.
func (s *serviceLocator) FooClient() FooClient {
	return s.fooClient
}

// BarClient implements the ServiceLocator interface.
func (s *serviceLocator) BarClient() BarClient {
	return s.barClient
}
